/*47*/
|- let twice = fun f -> fun x -> f (f x) in twice twice (fun x -> x * x) 2 evalto 65536 by E-Let {
    |- fun f -> fun x -> f (f x) evalto ()[fun f -> fun x -> f (f x)] by E-Fun {};
    twice = ()[fun f -> fun x -> f (f x)] |- twice twice (fun x -> x * x) 2 evalto 65536 by E-App {
        twice = ()[fun f -> fun x -> f (f x)]
            |- twice twice (fun x -> x * x) evalto (f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)])[fun x -> f (f x)] by E-App {
                twice = ()[fun f -> fun x -> f (f x)]
                    |- twice twice evalto (f = ()[fun f -> fun x -> f (f x)])[fun x -> f (f x)] by E-App {
                        twice = ()[fun f -> fun x -> f (f x)] |- twice evalto ()[fun f -> fun x -> f (f x)] by E-Var1 {};
                        twice = ()[fun f -> fun x -> f (f x)] |- twice evalto ()[fun f -> fun x -> f (f x)] by E-Var1 {};
                        f = ()[fun f -> fun x -> f (f x)] |- fun x -> f (f x) evalto (f = ()[fun f -> fun x -> f (f x)])[fun x -> f (f x)] by E-Fun {};
                    };
                twice = ()[fun f -> fun x -> f (f x)]
                    |- fun x -> x * x evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Fun {};
                f = ()[fun f -> fun x -> f (f x)], x = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                    |- f (f x) evalto (f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)])[fun x -> f (f x)] by E-App {
                    f = ()[fun f -> fun x -> f (f x)], x = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                        |- f evalto ()[fun f -> fun x -> f (f x)] by E-Var2 {
                            f = ()[fun f -> fun x -> f (f x)] |- f evalto ()[fun f -> fun x -> f (f x)] by E-Var1 {};
                        };
                    f = ()[fun f -> fun x -> f (f x)], x = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                        |- f x evalto (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)] by E-App {
                            f = ()[fun f -> fun x -> f (f x)], x = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                                |- f evalto ()[fun f -> fun x -> f (f x)] by E-Var2 {
                                    f = ()[fun f -> fun x -> f (f x)] |- f evalto ()[fun f -> fun x -> f (f x)] by E-Var1 {};
                                };
                            f = ()[fun f -> fun x -> f (f x)], x = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                                |- x evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var1 {};
                            f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                                |- fun x -> f (f x) evalto (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)] by E-Fun {};
                        };
                    f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)]
                        |- fun x -> f (f x) evalto (f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)])[fun x -> f (f x)] by E-Fun {};
                }
            };
        twice = ()[fun f -> fun x -> f (f x)] |- 2 evalto 2 by E-Int {};
        f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)], x = 2
            |- f (f x) evalto 65536 by E-App {
                f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)], x = 2
                    |- f evalto (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)] by E-Var2 {
                        f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)]
                            |- f evalto (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)] by E-Var1 {};
                    };
                f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)], x = 2
                    |- f x evalto 16 by E-App {
                        f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)], x = 2
                            |- f evalto (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)] by E-Var2 {
                                f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)]
                                    |- f evalto (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)] by E-Var1 {};
                            };
                        f = (f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x])[fun x -> f (f x)], x = 2
                            |- x evalto 2 by E-Var1 {};
                        f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 2
                            |- f (f x) evalto 16 by E-App {
                                f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 2
                                    |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var2 {
                                        f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                                            |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var1 {};
                                    };
                                f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 2
                                    |- f x evalto 4 by E-App {
                                        f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 2
                                            |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var2 {
                                                f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
                                                    |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var1 {};
                                            };
                                        f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 2
                                            |- x evalto 2 by E-Var1 {};
                                        twice = ()[fun f -> fun x -> f (f x)], x = 2 |- x * x evalto 4 by E-Times {
                                            twice = ()[fun f -> fun x -> f (f x)], x = 2 |- x evalto 2 by E-Var1{};
                                            twice = ()[fun f -> fun x -> f (f x)], x = 2 |- x evalto 2 by E-Var1{};
                                            2 times 2 is 4 by B-Times {};
                                        };
                                    };
                                twice = ()[fun f -> fun x -> f (f x)], x = 4 |- x * x evalto 16 by E-Times {
                                    twice = ()[fun f -> fun x -> f (f x)], x = 4 |- x evalto 4 by E-Var1{};
                                    twice = ()[fun f -> fun x -> f (f x)], x = 4 |- x evalto 4 by E-Var1{};
                                    4 times 4 is 16 by B-Times {};
                                };
                        }
                    };
                f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 16 |- f (f x) evalto 65536 by E-App {
			f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 16 |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var2 {
				f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
				    |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var1 {};
			    };
			f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 16
			    |- f x evalto 256 by E-App {
				f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 16
				    |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var2 {
					f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x]
					    |- f evalto (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x] by E-Var1 {};
				    };
				f = (twice = ()[fun f -> fun x -> f (f x)])[fun x -> x * x], x = 16
				    |- x evalto 16 by E-Var1 {};
				twice = ()[fun f -> fun x -> f (f x)], x = 16 |- x * x evalto 256 by E-Times {
				    twice = ()[fun f -> fun x -> f (f x)], x = 16 |- x evalto 16 by E-Var1{};
				    twice = ()[fun f -> fun x -> f (f x)], x = 16 |- x evalto 16 by E-Var1{};
				    16 times 16 is 256 by B-Times {};
				};
			    };
			twice = ()[fun f -> fun x -> f (f x)], x = 256 |- x * x evalto 65536 by E-Times {
			    twice = ()[fun f -> fun x -> f (f x)], x = 256 |- x evalto 256 by E-Var1{};
			    twice = ()[fun f -> fun x -> f (f x)], x = 256 |- x evalto 256 by E-Var1{};
			    256 times 256 is 65536 by B-Times {};
			};
		}
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
/*48*/

|- let compose = fun f -> fun g -> fun x -> f (g x) in let p = fun x -> x * x in let q = fun x -> x + 4 in compose p q 4 evalto 64 by E-Let {
    |- fun f -> fun g -> fun x -> f (g x) evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Fun {};
    compose = ()[fun f -> fun g -> fun x -> f (g x)] |- let p = fun x -> x * x in let q = fun x -> x + 4 in compose p q 4 evalto 64 by E-Let {
        compose = ()[fun f -> fun g -> fun x -> f (g x)] |- fun x -> x * x evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Fun {};
        compose = ()[fun f -> fun g -> fun x -> f (g x)] , p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |- let q = fun x -> x + 4 in compose p q 4 evalto 64 by E-Let {
            compose = ()[fun f -> fun g -> fun x -> f (g x)] , p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |- fun x -> x + 4 evalto ( compose = ()[fun f -> fun g -> fun x -> f (g x)] , p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Fun {};
            compose = ()[fun f -> fun g -> fun x -> f (g x)] , p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] , q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- compose p q 4 evalto 64 by E-App {
                compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- compose p q evalto (f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4])[fun x -> f (g x)] by E-App{
                    compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], q = (compose = ()[fun f -> fun g -> fun x -> f (g x)] , p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- compose p evalto (f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun g -> fun x -> f (g x)] by E-App {
                        compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- compose evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Var2 {
                            compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |- compose evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Var2 {
                                compose = ()[fun f -> fun g -> fun x -> f (g x)] |- compose evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Var1 {}
                            }
                        };
                        compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- p evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var2 {
                            compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |- p evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var1 {};
                        };
                        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |- fun g -> fun x -> f (g x) evalto (f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun g -> fun x -> f (g x)] by E-Fun {}
                    };
                    compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- q evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Var1 {};
                    f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)],p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- fun x -> f (g x) evalto (f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4])[fun x -> f (g x)] by E-Fun {}
                };
                compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- 4 evalto 4 by E-Int {};
                f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4], x = 4 |- f (g x) evalto 64 by E-App {
                    f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4], x = 4 |- f evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var2 {
                        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- f evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var2 {
                            f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |- f evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var1 {}
                        }
                    };
                    f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4], x = 4 |- g x evalto 8 by E-App {
                        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4], x = 4 |- g evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Var2 {
                            f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] |- g evalto ( compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] )[fun x -> x + 4] by E-Var1 {}
                        };
                        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], g = ( compose = ()[fun f -> fun g -> fun x -> f (g x)],  p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4], x = 4 |- x evalto 4 by E-Var1 {};
                        compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], x = 4 |- x + 4 evalto 8 by E-Plus {
                            compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], x = 4 |- x evalto 4 by E-Var1 {};
                            compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x], x = 4 |- 4 evalto 4 by E-Int {};
                            4 plus 4 is 8 by B-Plus {};
                        }
                    };
                    compose = ()[fun f -> fun g -> fun x -> f (g x)], x = 8 |- x * x evalto 64 by E-Times {
                        compose = ()[fun f -> fun g -> fun x -> f (g x)], x = 8 |- x evalto 8 by E-Var1 {};
                        compose = ()[fun f -> fun g -> fun x -> f (g x)], x = 8 |- x evalto 8 by E-Var1 {};
                        8 times 8 is 64 by B-Times {};
                    }
                }
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
/*49*/

|- let s = fun f -> fun g -> fun x -> f x (g x) in let k = fun x -> fun y -> x in s k k 7 evalto 7 by E-Let {
    |- fun f -> fun g -> fun x -> f x (g x) evalto ()[fun f -> fun g -> fun x -> f x (g x)] by E-Fun {};
    s = ()[fun f -> fun g -> fun x -> f x (g x)] |- let k = fun x -> fun y -> x in s k k 7 evalto 7 by E-Let {
        s = ()[fun f -> fun g -> fun x -> f x (g x)] |- fun x -> fun y -> x evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Fun {};
        s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- s k k 7 evalto 7 by E-App {
            s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- s k k evalto (f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x])[fun x -> f x (g x)] by E-App {
                s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- s k evalto (f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x])[fun g -> fun x -> f x (g x)] by E-App {
                    s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- s evalto ()[fun f -> fun g -> fun x -> f x (g x)] by E-Var2 {
                        s = ()[fun f -> fun g -> fun x -> f x (g x)] |- s evalto ()[fun f -> fun g -> fun x -> f x (g x)] by E-Var1 {};
                    };
                    s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- k evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Var1 {};
                    f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- fun g -> fun x -> f x (g x) evalto (f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x])[fun g -> fun x -> f x (g x)] by E-Fun {};
                };
                s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- k evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x]       by E-Var1 {};
                f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- fun x -> f x (g x) evalto (f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x])[fun x -> f x (g x)] by E-Fun {};
            };
            s = ()[fun f -> fun g -> fun x -> f x (g x)], k = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- 7 evalto 7 by E-Int {};
            f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- f x (g x) evalto 7 by E-App {
                f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- f x evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7)[fun y -> x] by E-App {
                    f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- f evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Var2 {
                        f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- f evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Var2 {
                            f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- f evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Var1 {};
                        };
                    };
                    f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- x evalto 7 by E-Var1 {};
                    s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7 |- fun y -> x evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7)[fun y -> x] by E-Fun {};
                };
                f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- g x evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7)[fun y -> x] by E-App {
                    f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- g evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Var2 {
                        f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] |- g evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x] by E-Var1 {};
                    };
                    f = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], g = (s = ()[fun f -> fun g -> fun x -> f x (g x)])[fun x -> fun y -> x], x = 7 |- x evalto 7 by E-Var1 {};
                    s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7 |- fun y -> x evalto (s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7)[fun y -> x] by E-Fun {};
                };
                s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7, y = (s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7)[fun y -> x] |- x evalto 7 by E-Var2 {
                    s = ()[fun f -> fun g -> fun x -> f x (g x)], x = 7 |- x evalto 7 by E-Var1 {};
                };
            };
        };
    };
}
------------------------------------------------------------------------------------------------------------------------------------------------------
/*50*/

|- let rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1) in fact 3 evalto 6 by E-LetRec {
	fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] |- fact 3 evalto 6 by E-AppRec {
	    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] |- fact evalto ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] by E-Var1 {};
	    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] |- 3 evalto 3 by E-Int {};
	    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- if n < 2 then 1 else n * fact (n - 1) evalto 6 by E-IfF {
		    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- n < 2 evalto false by E-Lt {
		        fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- n evalto 3 by E-Var1 {};
				fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- 2 evalto 2 by E-Int {};
				3 less than 2 is false by B-Lt {}
		    };
		    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- n * fact (n - 1) evalto 6 by E-Times {
		        fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- n evalto 3 by E-Var1 {};
				fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- fact (n - 1) evalto 2 by E-AppRec {
					fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- fact evalto ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] by E-Var2 {
						fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] |- fact evalto ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] by E-Var1 {}
					};
					fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- n - 1 evalto 2 by E-Minus {
			    		fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- n evalto 3 by E-Var1 {};
			    		fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 3 |- 1 evalto 1 by E-Int {};
			    		3 minus 1 is 2 by B-Minus {}
			  		};
			  		fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- if n < 2 then 1 else n * fact (n - 1) evalto 2 by E-IfF {
			    		fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- n < 2 evalto false by E-Lt {
			      			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- n evalto 2 by E-Var1 {};
			      			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- 2 evalto 2 by E-Int {};
			      			2 less than 2 is false by B-Lt {}
			    		};
			    		fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- n * fact (n - 1) evalto 2 by E-Times {
			      			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- n evalto 2 by E-Var1 {};
			      			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- fact (n - 1) evalto 1 by E-AppRec {
			        			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- fact evalto ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] by E-Var2 {
				  					fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] |- fact evalto ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)] by E-Var1 {}
								};
								fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- n - 1 evalto 1 by E-Minus {
						  			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- n evalto 2 by E-Var1 {};
						  			fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 2 |- 1 evalto 1 by E-Int {};
						  			2 minus 1 is 1 by B-Minus {}
								};
								fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 1 |- if n < 2 then 1 else n * fact (n - 1) evalto 1 by E-IfT {
								  fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 1 |- n < 2 evalto true by E-Lt {
								    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 1 |- n evalto 1 by E-Var1 {};
								    fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 1 |- 2 evalto 2 by E-Int {};
								    1 is less than 2 by B-Lt {}
								  };
								  fact = ()[rec fact = fun n -> if n < 2 then 1 else n * fact (n - 1)], n = 1 |- 1 evalto 1 by E-Int {};
								}
			      			};
			      			2 times 1 is 2 by B-Times {}
			    		}
			  		}
				};
				3 times 2 is 6 by B-Times {}
	      	}
	    }
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------
/*51*/

|- let rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2) in fib 5 evalto 5 by E-LetRec {
    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib 5 evalto 5 by E-AppRec {
        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- 5 evalto 5 by E-Int {};
        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 5 by E-IfF {
            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- n < 3 evalto false by E-Lt {
                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- n evalto 5 by E-Var1 {};
                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- 3 evalto 3 by E-Int {};
                5 less than 3 is false by B-Lt {};
            };
            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- fib (n - 1) + fib (n - 2) evalto 5 by E-Plus {
                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- fib (n - 1) evalto 3 by E-AppRec {
                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                    };
                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- n - 1 evalto 4 by E-Minus {
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- n evalto 5 by E-Var1 {};
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- 1 evalto 1 by E-Int {};
                        5 minus 1 is 4 by B-Minus {};
                    };
                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 3 by E-IfF {
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- n < 3 evalto false by E-Lt {
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- n evalto 4 by E-Var1 {};
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- 3 evalto 3 by E-Int {};
                            4 less than 3 is false by B-Lt {};
                        };
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- fib (n - 1) + fib (n - 2) evalto 3 by E-Plus {
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- fib (n - 1) evalto 2 by E-AppRec {
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- n - 1 evalto 3 by E-Minus {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- n evalto 4 by E-Var1 {};
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- 1 evalto 1 by E-Int {};
                                    4 minus 1 is 3 by B-Minus {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 2 by E-IfF {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n < 3 evalto false by E-Lt {
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n evalto 3 by E-Var1 {};
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- 3 evalto 3 by E-Int {};
                                        3 less than 3 is false by B-Lt {};
                                    };
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib (n - 1) + fib (n - 2) evalto 2 by E-Plus {
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib (n - 1) evalto 1 by E-AppRec {
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                                            };
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n - 1 evalto 2 by E-Minus {
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n evalto 3 by E-Var1 {};
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- 1 evalto 1 by E-Int {};
                                                3 minus 1 is 2 by B-Minus {};
                                            };
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 1 by E-IfT {
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- n < 3 evalto true by E-Lt {
                                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- n evalto 2 by E-Var1 {};
                                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- 3 evalto 3 by E-Int {};
                                                    2 less than 3 is true by B-Lt {};
                                                };
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- 1 evalto 1 by E-Int {};
                                            };
                                        };
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib (n - 2) evalto 1 by E-AppRec {
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                                            };
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n - 2 evalto 1 by E-Minus {
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n evalto 3 by E-Var1 {};
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- 2 evalto 2 by E-Int {};
                                                3 minus 2 is 1 by B-Minus {};
                                            };
                                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 1 by E-IfT {
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- n < 3 evalto true by E-Lt {
                                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- n evalto 1 by E-Var1 {};
                                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- 3 evalto 3 by E-Int {};
                                                    1 less than 3 is true by B-Lt {};
                                                };
                                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- 1 evalto 1 by E-Int {};
                                            };
                                        };
                                        1 plus 1 is 2 by B-Plus {};
                                    };
                                };
                            };
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- fib (n - 2) evalto 1 by E-AppRec {
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- n - 2 evalto 2 by E-Minus {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- n evalto 4 by E-Var1 {};
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 4 |- 2 evalto 2 by E-Int {};
                                    4 minus 2 is 2 by B-Minus {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 1 by E-IfT {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- n < 3 evalto true by E-Lt {
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- n evalto 2 by E-Var1 {};
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- 3 evalto 3 by E-Int {};
                                        2 less than 3 is true by B-Lt {};
                                    };
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- 1 evalto 1 by E-Int {};
                                };
                            };
                            2 plus 1 is 3 by B-Plus {};
                        };
                    };
                };
                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- fib (n - 2) evalto 2 by E-AppRec {
                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                    };
                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- n - 2 evalto 3 by E-Minus {
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- n evalto 5 by E-Var1 {};
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 5 |- 2 evalto 2 by E-Int {};
                        5 minus 2 is 3 by B-Minus {};
                    };
                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 2 by E-IfF {
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n < 3 evalto false by E-Lt {
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n evalto 3 by E-Var1 {};
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- 3 evalto 3 by E-Int {};
                            3 less than 3 is false by B-Lt {};
                        };
                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib (n - 1) + fib (n - 2) evalto 2 by E-Plus {
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib (n - 1) evalto 1 by E-AppRec {
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n - 1 evalto 2 by E-Minus {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n evalto 3 by E-Var1 {};
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- 1 evalto 1 by E-Int {};
                                    3 minus 1 is 2 by B-Minus {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 1 by E-IfT {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- n < 3 evalto true by E-Lt {
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- n evalto 2 by E-Var1 {};
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- 3 evalto 3 by E-Int {};
                                        2 less than 3 is true by B-Lt {};
                                    };
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 2 |- 1 evalto 1 by E-Int {};
                                };
                            };
                            fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib (n - 2) evalto 1 by E-AppRec {
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var2 {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] |- fib evalto ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)] by E-Var1 {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n - 2 evalto 1 by E-Minus {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- n evalto 3 by E-Var1 {};
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 3 |- 2 evalto 2 by E-Int {};
                                    3 minus 2 is 1 by B-Minus {};
                                };
                                fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- if n < 3 then 1 else fib (n - 1) + fib (n - 2) evalto 1 by E-IfT {
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- n < 3 evalto true by E-Lt {
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- n evalto 1 by E-Var1 {};
                                        fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- 3 evalto 3 by E-Int {};
                                        1 less than 3 is true by B-Lt {};
                                    };
                                    fib = ()[rec fib = fun n -> if n < 3 then 1 else fib (n - 1) + fib (n - 2)], n = 1 |- 1 evalto 1 by E-Int {};
                                };
                            };
                            1 plus 1 is 2 by B-Plus {};
                        };
                    };
                };
                3 plus 2 is 5 by B-Plus {};
            };
        };
    };
}
------------------------------------------------------------------------------------------------------------------------------------------------------
/*52*/

|- let rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1) in sum (fun x -> x * x) 2 evalto 5 by E-LetRec {
    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- sum (fun x -> x * x) 2 evalto 5 by E-App {
        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- sum (fun x -> x * x) evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x])[fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-AppRec {
            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var1 {};
            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- fun x -> x * x evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Fun {};
            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- fun n -> if n < 1 then 0 else f n + sum f (n - 1) evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x])[fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Fun {};
        };
        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- 2 evalto 2 by E-Int {};
        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- if n < 1 then 0 else f n + sum f (n - 1) evalto 5 by E-IfF {
            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- n < 1 evalto false by E-Lt {
                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- n evalto 2 by E-Var1 {};
                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- 1 evalto 1 by E-Int {};
                2 less than 1 is false by B-Lt {};
            };
            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- f n + sum f (n - 1) evalto 5 by E-Plus {
                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- f n evalto 4 by E-App {
                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var2 {
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var1 {};
                    };
                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- n evalto 2 by E-Var1 {};
                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], x = 2 |- x * x evalto 4 by E-Times {
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], x = 2 |- x evalto 2 by E-Var1 {};
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], x = 2 |- x evalto 2 by E-Var1 {};
                        2 times 2 is 4 by B-Times {};
                    }; 
                };
                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- sum f (n - 1) evalto 1 by E-App {
                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- sum f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x])[fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-AppRec {
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var2 {
                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var2 {
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var1 {};
                            };
                        };
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var2 {
                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var1 {};
                        };
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- fun n -> if n < 1 then 0 else f n + sum f (n - 1) evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x])[fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Fun {};
                    };
                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- n - 1 evalto 1 by E-Minus {
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- n evalto 2 by E-Var1 {};
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 2 |- 1 evalto 1 by E-Int {};
                        2 minus 1 is 1 by B-Minus {};
                    };
                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- if n < 1 then 0 else f n + sum f (n - 1) evalto 1 by E-IfF {
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- n < 1 evalto false by E-Lt {
                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- n evalto 1 by E-Var1 {};
                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- 1 evalto 1 by E-Int {};
                            1 less than 1 is false by B-Lt {};
                        };
                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- f n + sum f (n - 1) evalto 1 by E-Plus {
                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- f n evalto 1 by E-App {
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var2 {
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var1 {};
                                };
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- n evalto 1 by E-Var1 {};
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], x = 1 |- x * x evalto 1 by E-Times {
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], x = 1 |- x evalto 1 by E-Var1 {};
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], x = 1 |- x evalto 1 by E-Var1 {};
                                    1 times 1 is 1 by B-Times {};
                                };
                            };
                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- sum f (n - 1) evalto 0 by E-App {
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- sum f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x])[fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-AppRec {
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var2 {
                                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var2 {
                                            sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] |- sum evalto ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Var1 {};
                                        };
                                    };
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var2 {
                                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- f evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] by E-Var1 {};
                                    };
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x] |- fun n -> if n < 1 then 0 else f n + sum f (n - 1) evalto (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x])[fun n -> if n < 1 then 0 else f n + sum f (n - 1)] by E-Fun {};
                                };
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- n - 1 evalto 0 by E-Minus {
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- n evalto 1 by E-Var1 {};
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 1 |- 1 evalto 1 by E-Int {};
                                    1 minus 1 is 0 by B-Minus {};
                                };
                                sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 0 |- if n < 1 then 0 else f n + sum f (n - 1) evalto 0 by E-IfT {
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 0 |- n < 1 evalto true by E-Lt {
                                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 0 |- n evalto 0 by E-Var1 {};
                                        sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 0 |- 1 evalto 1 by E-Int {};
                                        0 less than 1 is true by B-Lt {};
                                    };
                                    sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)], f = (sum = ()[rec sum = fun f -> fun n -> if n < 1 then 0 else f n + sum f (n - 1)])[fun x -> x * x], n = 0 |- 0 evalto 0 by E-Int {};
                                }; 
                            }; 
                            1 plus 0 is 1 by B-Plus {};
                        };
                    };
                };
                4 plus 1 is 5 by B-Plus {};
            };
        };
    };
}
------------------------------------------------------------------------------------------------------------------------------------------------------
/*53*/

|- let fact = fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1) in fact fact 3 evalto 6 by E-Let {
    |- fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1) evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {};
    fact = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fact fact 3 evalto 6 by E-App {
        fact = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fact fact evalto (self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)])[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-App {
            fact = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fact evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
            fact = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fact evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fun n -> if n < 2 then 1 else n * self self (n - 1) evalto (self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)])[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {};
        };
        fact = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- 3 evalto 3 by E-Int {};
        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- if n < 2 then 1 else n * self self (n - 1) evalto 6 by E-IfF {
            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- n < 2 evalto false by E-Lt {
                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- n evalto 3 by E-Var1 {};
                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- 2 evalto 2 by E-Int {};
                3 less than 2 is false by B-Lt {};
            };
            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- n * self self (n - 1) evalto 6 by E-Times {
                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- n evalto 3 by E-Var1 {};
                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- self self (n - 1) evalto 2 by E-App {
                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- self self evalto (self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)])[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-App {
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
                            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
                        };
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
                            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
                        };
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fun n -> if n < 2 then 1 else n * self self (n - 1) evalto (self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)])[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {};
                    };
                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- n - 1 evalto 2 by E-Minus {
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- n evalto 3 by E-Var1 {};
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 3 |- 1 evalto 1 by E-Int {};
                        3 minus 1 is 2 by B-Minus {};
                    };
                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- if n < 2 then 1 else n * self self (n - 1) evalto 2 by E-IfF {
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- n < 2 evalto false by E-Lt {
                            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- n evalto 2 by E-Var1 {};
                            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- 2 evalto 2 by E-Int {};
                            2 less than 2 is false by B-Lt {};
                        };
                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- n * self self (n - 1) evalto 2 by E-Times {
                            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- n evalto 2 by E-Var1 {};
                            self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- self self (n - 1) evalto 1 by E-App {
                                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- self self evalto (self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)])[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-App {
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
                                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
                                    };
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
                                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
                                    };
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] |- fun n -> if n < 2 then 1 else n * self self (n - 1) evalto (self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)])[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {};
                                };
                                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- n - 1 evalto 1 by E-Minus {
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- n evalto 2 by E-Var1 {};
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 2 |- 1 evalto 1 by E-Int {};
                                    2 minus 1 is 1 by B-Minus {};
                                };
                                self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 1 |- if n < 2 then 1 else n * self self (n - 1) evalto 1 by E-IfT {
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 1 |- n < 2 evalto true by E-Lt {
                                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 1 |- n evalto 1 by E-Var1 {};
                                        self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 1 |- 2 evalto 2 by E-Int {};
                                        1 less than 2 is true by B-Lt {};
                                    };
                                    self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)], n = 1 |- 1 evalto 1 by E-Int {};
                                };
                            };
                            2 times 1 is 2 by B-Times {};
                        };
                    };
                };
                3 times 2 is 6 by B-Times {};
            };
        }; 
    };
}
