/*111*/
f: 'a 'b.'a->'b->'a |- f 3 true + f 2 4 : int by T-Plus {
    f: 'a 'b.'a->'b->'a |- f 3 true : int by T-App {
        f: 'a 'b.'a->'b->'a |- f 3 : bool -> int by T-App {
            f: 'a 'b.'a->'b->'a |- f : int -> bool -> int by T-Var {};
            f: 'a 'b.'a->'b->'a |- 3 : int by T-Int {}
        };
        f: 'a 'b.'a->'b->'a |- true : bool by T-Bool {}
    };
    f: 'a 'b.'a->'b->'a |- f 2 4 : int by T-App {
        f: 'a 'b.'a->'b->'a |- f 2 : int -> int by T-App {
            f: 'a 'b.'a->'b->'a |- f : int -> int -> int by T-Var {};
            f: 'a 'b.'a->'b->'a |- 2 : int by T-Int {}
        };
        f: 'a 'b.'a->'b->'a |- 4 : int by T-Int {}
    }
}

/*112*/
|- let k = fun x -> fun y -> x in (k 3 true) :: (k (1::[]) 3) : int list by T-Let {
    |- fun x -> fun y -> x : 'a -> 'b -> 'a by T-Abs {
        x : 'a |- fun y -> x : 'b -> 'a by T-Abs {
            x : 'a, y : 'b |- x : 'a by T-Var {}
        }
    };
    k : 'a 'b. 'a -> 'b -> 'a |- (k 3 true) :: (k (1::[]) 3) : int list by T-Cons {
        k : 'a 'b. 'a -> 'b -> 'a |- k 3 true : int by T-App {
            k : 'a 'b. 'a -> 'b -> 'a |- k 3 : bool -> int by T-App {
                k : 'a 'b. 'a -> 'b -> 'a |- k : int -> bool -> int by T-Var {};
                k : 'a 'b. 'a -> 'b -> 'a |- 3 : int by T-Int {}
            };
            k : 'a 'b. 'a -> 'b -> 'a |- true : bool by T-Bool {}
        };
        k : 'a 'b. 'a -> 'b -> 'a |- k (1::[]) 3 : int list by T-App {
            k : 'a 'b. 'a -> 'b -> 'a |- k (1::[]) : int -> int list by T-App {
                k : 'a 'b. 'a -> 'b -> 'a |- k : int list -> int -> int list by T-Var {};
                k : 'a 'b. 'a -> 'b -> 'a |- 1::[] : int list by T-Cons {
                    k : 'a 'b. 'a -> 'b -> 'a |- 1 : int by T-Int {};
                    k : 'a 'b. 'a -> 'b -> 'a |- [] : int list by T-Nil {}
                }
            };
            k : 'a 'b. 'a -> 'b -> 'a |- 3 : int by T-Int {}
        }
    }
}

/*113*/
|- let compose = fun f -> fun g -> fun x -> f (g x) in let f = fun x -> if x then 3 else 4 in let g = fun x -> x < 4 in compose f (compose g f) true : int by T-Let {
    |- fun f -> fun g -> fun x -> f (g x) : ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c by T-Abs {
        f : 'b -> 'c |- fun g -> fun x -> f (g x) : ('a -> 'b) -> 'a -> 'c by T-Abs {
            f : 'b -> 'c, g : 'a -> 'b |- fun x -> f (g x) : 'a -> 'c by T-Abs {
                f : 'b -> 'c, g : 'a -> 'b, x : 'a |- f (g x) : 'c by T-App {
                    f : 'b -> 'c, g : 'a -> 'b, x : 'a |- f : 'b -> 'c by T-Var {};
                    f : 'b -> 'c, g : 'a -> 'b, x : 'a |- (g x) : 'b by T-App {
                        f : 'b -> 'c, g : 'a -> 'b, x : 'a |- g : 'a -> 'b by T-Var {};
                        f : 'b -> 'c, g : 'a -> 'b, x : 'a |- x : 'a by T-Var {}
                    }
                }
            }
        }
    };
    compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c |- let f = fun x -> if x then 3 else 4 in let g = fun x -> x < 4 in compose f (compose g f) true : int by T-Let {
        compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c |- fun x -> if x then 3 else 4 : bool -> int by T-Abs {
            compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, x : bool |- if x then 3 else 4 : int by T-If {
                compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, x : bool |- x : bool by T-Var {};
                compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, x : bool |- 3 : int by T-Int {};
                compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, x : bool |- 4 : int by T-Int {}
            }
        };
        compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int |- let g = fun x -> x < 4 in compose f (compose g f) true : int by T-Let {
            compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int |- fun x -> x < 4 : int -> bool by T-Abs {
                compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, x : int |- x < 4 : bool by T-Lt {
                    compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, x : int |- x : int by T-Var {};
                    compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, x : int |- 4 : int by T-Int {}
                }
            };
            compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose f (compose g f) true : int by T-App {
                compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose f (compose g f): (bool -> int) by T-App {
                    compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose f : (bool -> bool) -> (bool -> int) by T-App {
                        compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose : (bool -> int) -> (bool -> bool) -> (bool -> int) by T-Var {};
                        compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- f : bool -> int by T-Var {}
                    };
                    compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose g f : (bool -> bool) by T-App {
                        compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose g : (bool -> int) -> (bool -> bool) by T-App {
                            compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- compose : (int -> bool) -> (bool -> int) -> (bool -> bool) by T-Var {};
                            compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- g : (int -> bool) by T-Var {}
                        };
                        compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- f : bool -> int by T-Var {}
                    }
                };
                compose : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c, f : bool -> int, g : int -> bool |- true : bool by T-Bool {}
            }
        }
    }
}


/*114*/
|- let twice = fun f -> fun x -> f (f x) in twice (fun x -> x + 4) 5 : int by T-Let {
    |- fun f -> fun x -> f (f x) : ('a -> 'a) -> 'a -> 'a by T-Abs {
        f : 'a -> 'a |- fun x -> f (f x) : 'a -> 'a by T-Abs {
            f : 'a -> 'a, x : 'a |- f (f x) : 'a by T-App {
                f : 'a -> 'a, x : 'a |- f : 'a -> 'a by T-Var {};
                f : 'a -> 'a, x : 'a |- f x : 'a by T-App {
                    f : 'a -> 'a, x : 'a |- f : 'a -> 'a by T-Var {};
                    f : 'a -> 'a, x : 'a |- x : 'a by T-Var {}
                }
            }
        }
    };
    twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice (fun x -> x + 4) 5 : int by T-App {
        twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice (fun x -> x + 4) : int -> int by T-App {
            twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice : (int -> int) -> int -> int by T-Var {};
            twice : 'a. ('a -> 'a) -> 'a -> 'a |- (fun x -> x + 4) : int -> int by T-Abs {
                twice : 'a. ('a -> 'a) -> 'a -> 'a, x : int |- x + 4 : int by T-Plus {
                    twice : 'a. ('a -> 'a) -> 'a -> 'a, x : int |- x : int by T-Var {};
                    twice : 'a. ('a -> 'a) -> 'a -> 'a, x : int |- 4 : int by T-Int {}
                }
            }
        };
        twice : 'a. ('a -> 'a) -> 'a -> 'a |- 5 : int by T-Int {}
    }
}


/*115*/
|- let twice = fun f -> fun x -> f (f x) in twice twice (fun x -> x + 4) 5 : int by T-Let {
    |- fun f -> fun x -> f (f x) : ('a -> 'a) -> 'a -> 'a by T-Abs {
        f : 'a -> 'a |- fun x -> f (f x) : 'a -> 'a by T-Abs {
            f : 'a -> 'a, x : 'a |- f (f x) : 'a by T-App {
                f : 'a -> 'a, x : 'a |- f : 'a -> 'a by T-Var {};
                f : 'a -> 'a, x : 'a |- f x : 'a by T-App {
                    f : 'a -> 'a, x : 'a |- f : 'a -> 'a by T-Var {};
                    f : 'a -> 'a, x : 'a |- x : 'a by T-Var {}
                }
            }
        }
    };
    twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice twice (fun x -> x + 4) 5 : int by T-App {
        twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice twice (fun x -> x + 4) : int -> int by T-App {
            twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice twice : (int -> int) -> int -> int by T-App {
                twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice : ((int -> int) -> (int -> int)) -> (int -> int) -> (int -> int) by T-Var {};
                twice : 'a. ('a -> 'a) -> 'a -> 'a |- twice : (int -> int) -> int -> int by T-Var {}
            };
            twice : 'a. ('a -> 'a) -> 'a -> 'a |- (fun x -> x + 4) : int -> int by T-Abs {
                twice : 'a. ('a -> 'a) -> 'a -> 'a, x : int |- x + 4 : int by T-Plus {
                    twice : 'a. ('a -> 'a) -> 'a -> 'a, x : int |- x : int by T-Var {};
                    twice : 'a. ('a -> 'a) -> 'a -> 'a, x : int |- 4 : int by T-Int {}
                }
            }
        };
        twice : 'a. ('a -> 'a) -> 'a -> 'a |- 5 : int by T-Int {}
    }
}


/*116*/
|- let s = fun f -> fun g -> fun x -> f x (g x) in let k = fun x -> fun y -> x in s k k : 'a -> 'a by T-Let {
    |- fun f -> fun g -> fun x -> f x (g x) : ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c by T-Abs {
        f : ('a -> 'b -> 'c) |- fun g -> fun x -> f x (g x) : ('a -> 'b) -> 'a -> 'c by T-Abs {
            f : ('a -> 'b -> 'c), g : 'a -> 'b |- fun x -> f x (g x) : 'a -> 'c by T-Abs {
                f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- f x (g x) : 'c by T-App {
                    f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- f x : 'b -> 'c by T-App {
                        f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- f : 'a -> 'b -> 'c by T-Var {};
                        f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- x : 'a by T-Var {}
                    };
                    f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- g x : 'b by T-App {
                        f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- g : 'a -> 'b by T-Var {};
                        f : ('a -> 'b -> 'c), g : 'a -> 'b, x : 'a |- x : 'a by T-Var {}
                    }
                }
            }
        }
    };
    s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c |- let k = fun x -> fun y -> x in s k k : 'a -> 'a by T-Let {
        s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c |- fun x -> fun y -> x : 'a -> 'b -> 'a by T-Abs {
            s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, x : 'a |- fun y -> x : 'b -> 'a by T-Abs {
                s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, x : 'a, y : 'b |- x : 'a  by T-Var {}
            }
        };
        s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, k : 'a 'b. 'a -> 'b -> 'a |- s k k : 'a -> 'a by T-App {
            s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, k : 'a 'b. 'a -> 'b -> 'a |- s k : ('a -> 'b -> 'a) -> 'a -> 'a by T-App {
                s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, k : 'a 'b. 'a -> 'b -> 'a |- s : ('a -> ('b -> 'a) -> 'a) -> ('a -> ('b -> 'a)) -> 'a -> 'a by T-Var {};
                s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, k : 'a 'b. 'a -> 'b -> 'a |- k : 'a -> ('b -> 'a) -> 'a by T-Var {}
            };
            s : 'a 'b 'c. ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c, k : 'a 'b. 'a -> 'b -> 'a |- k : 'a -> 'b -> 'a by T-Var {}
        }
    }
}


/*117*/
|- let x = [] in let y = 3 :: x in true :: x : bool list by T-Let {
    |- [] : 'a list by T-Nil {};
    x : 'a. 'a list |- let y = 3 :: x in true :: x : bool list by T-Let {
        x : 'a. 'a list |- 3 :: x : int list by T-Cons {
            x : 'a. 'a list |- 3 : int by T-Int {};
            x : 'a. 'a list |- x : int list by T-Var {}
        };
        x : 'a. 'a list, y : int list |- true :: x : bool list by T-Cons {
            x : 'a. 'a list, y : int list |- true : bool by T-Bool {};
            x : 'a. 'a list, y : int list |- x : bool list by T-Var {}
        }
    }
}


/*118*/
|- let l = (fun x -> x) :: [] in let l1 = (fun y -> y + 1) :: l in (fun z -> if z then false else true) :: l : (bool -> bool) list by T-Let {
    |- (fun x -> x) :: [] : ('a -> 'a) list by T-Cons {
        |- (fun x -> x) : ('a -> 'a) by T-Abs {
            x : 'a |- x : 'a by T-Var {}
        };
        |- [] : ('a -> 'a) list by T-Nil {}
    };
    l : 'a. ('a -> 'a) list |- let l1 = (fun y -> y + 1) :: l in (fun z -> if z then false else true) :: l : (bool -> bool) list by T-Let {
        l : 'a. ('a -> 'a) list |- (fun y -> y + 1) :: l : (int -> int) list by T-Cons {
            l : 'a. ('a -> 'a) list |- (fun y -> y + 1) : int -> int by T-Abs {
                l : 'a. ('a -> 'a) list, y: int |- y + 1 : int by T-Plus {
                    l : 'a. ('a -> 'a) list, y: int |- y : int by T-Var {};
                    l : 'a. ('a -> 'a) list, y: int |- 1 : int by T-Int {}
                }
            }
            l : 'a. ('a -> 'a) list |- l : (int -> int) list by T-Var {}
        };
        l : 'a. ('a -> 'a) list, l1 : (int -> int) list |- (fun z -> if z then false else true) :: l : (bool -> bool) list by T-Cons {
            l : 'a. ('a -> 'a) list, l1 : (int -> int) list |- (fun z -> if z then false else true) : (bool -> bool) by T-Abs {
                l : 'a. ('a -> 'a) list, l1 : (int -> int) list, z : bool |- if z then false else true : bool by T-If {
                    l : 'a. ('a -> 'a) list, l1 : (int -> int) list, z : bool |- z : bool by T-Var {};
                    l : 'a. ('a -> 'a) list, l1 : (int -> int) list, z : bool |- false : bool by T-Bool {};
                    l : 'a. ('a -> 'a) list, l1 : (int -> int) list, z : bool |- true : bool by T-Bool {}
                }
            };
            l : 'a. ('a -> 'a) list, l1 : (int -> int) list |- l : (bool -> bool) list by T-Var {}
        }
    }
}


/*119*/ 分析length，l一定是一个list，最终的输出是int
|- let rec length = fun l -> match l with [] -> 0 | x :: y -> 1 + length y in length (3 :: 2 :: []) + length ((1 :: []) :: []) : int by T-LetRec {
    length : 'a list -> int, l : 'a list |- match l with [] -> 0 | x :: y -> 1 + length y : int by T-Match {
        length : 'a list -> int, l : 'a list |- l : 'a list by T-Var {};
        length : 'a list -> int, l : 'a list |- 0 : int by T-Int {};
        length : 'a list -> int, l : 'a list, x : 'a, y : 'a list |- 1 + length y : int by T-Plus {
            length : 'a list -> int, l : 'a list, x : 'a, y : 'a list |- 1 : int by T-Int {};
            length : 'a list -> int, l : 'a list, x : 'a, y : 'a list |- length y : int by T-App {
                length : 'a list -> int, l : 'a list, x : 'a, y : 'a list |- length : 'a list -> int by T-Var {};
                length : 'a list -> int, l : 'a list, x : 'a, y : 'a list |- y : 'a list by T-Var {}
            }
        }
    };
    length : 'a. 'a list -> int |- length (3 :: 2 :: []) + length ((1 :: []) :: []) : int by T-Plus {
        length : 'a. 'a list -> int |- length (3 :: 2 :: []) : int by T-App {
            length : 'a. 'a list -> int |- length : int list -> int by T-Var {};
            length : 'a. 'a list -> int |- (3 :: 2 :: []) : int list by T-Cons {
                length : 'a. 'a list -> int |- 3 : int by T-Int {};
                length : 'a. 'a list -> int |- 2::[] : int list by T-Cons {
                    length : 'a. 'a list -> int |- 2 : int by T-Int {};
                    length : 'a. 'a list -> int |- [] : int list by T-Nil {}
                }
            }
        };
        length : 'a. 'a list -> int |- length ((1 :: []) :: []) : int by T-App {
            length : 'a. 'a list -> int |- length : (int list) list -> int by T-Var {};
            length : 'a. 'a list -> int |- ((1 :: []) :: []) : (int list) list by T-Cons {
                length : 'a. 'a list -> int |- (1 :: []) : int list by T-Cons {
                    length : 'a. 'a list -> int |- 1 : int by T-Int {};
                    length : 'a. 'a list -> int |- [] : int list by T-Nil {}
                };
                length : 'a. 'a list -> int |- [] : (int list) list by T-Nil {}
            }
        }
    }
}


/*120*/f因为有两个(fun x -> x < 3)和(fun x -> x * 2)所以不能是'a->'a。
|- let rec map = fun f -> fun l -> match l with [] -> [] | x :: y -> f x :: map f y in map (fun x -> x < 3) (map (fun x -> x * 2) (4 :: 5 :: 1 :: [])) : bool list by T-LetRec {
    map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b |- fun l -> match l with [] -> [] | x :: y -> f x :: map f y : 'a list -> 'b list by T-Abs {
        map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list |- match l with [] -> [] | x :: y -> f x :: map f y : 'b list by T-Match {
            map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list |- l : 'a list by T-Var {};
            map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list |- [] : 'b list by T-Nil {};
            map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- f x :: map f y : 'b list by T-Cons {
                map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- f x : 'b  by T-App {
                    map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- f : 'a -> 'b  by T-Var {};
                    map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- x : 'a by T-Var {}
                };
                map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- map f y : 'b list by T-App {
                    map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- map f : 'a list -> 'b list by T-App {
                        map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- map : ('a -> 'b) -> 'a list -> 'b list by T-Var {};
                        map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- f : ('a -> 'b) by T-Var {}
                    };
                    map : ('a -> 'b) -> 'a list -> 'b list, f : 'a -> 'b, l : 'a list, x : 'a, y : 'a list |- y : 'a list by T-Var {}
                }
            }
        }
    };
    map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- map (fun x -> x < 3) (map (fun x -> x * 2) (4 :: 5 :: 1 :: [])) : bool list by T-App {
        map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- map (fun x -> x < 3) : int list -> bool list by T-App {
            map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- map : (int -> bool) -> int list -> bool list by T-Var {};
            map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- (fun x -> x < 3) : int -> bool by T-Abs {
                map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list, x : int |- x < 3: bool by T-Lt {
                    map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list, x : int |- x : int by T-Var {};
                    map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list, x : int |- 3 : int by T-Int {}
                }
            }
        };
        map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- (map (fun x -> x * 2) (4 :: 5 :: 1 :: [])) : int list by T-App {
            map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- map (fun x -> x * 2) : int list -> int list by T-App {
                map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- map : (int -> int) -> int list -> int list by T-Var {};
                map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- (fun x -> x * 2) : int -> int by T-Abs {
                    map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list, x : int |- x * 2 : int by T-Mult {
                        map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list, x : int |- x : int by T-Var {};
                        map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list, x : int |- 2 : int by T-Int {}
                    }
                }
            };
            map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- (4 :: 5 :: 1 :: []) : int list by T-Cons {
                map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- 4 : int by T-Int {};
                map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- 5 :: 1 :: [] : int list by T-Cons {
                    map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- 5 : int by T-Int {};
                    map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- 1 :: [] : int list by T-Cons {
                        map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- 1 : int by T-Int {};
                        map : 'a 'b. ('a -> 'b) -> 'a list -> 'b list |- [] : int list by T-Nil {}
                    }
                }
            }
        }
    }
}



/*121*/ 在这里a并没有起作用，所以题目中只有bool型的list

|- let rec map = fun f -> fun l -> match l with [] -> [] | x :: y -> f x :: map f y in let f = map (fun x -> x) in let a = f (3 :: []) in f (true :: []) : bool list by T-LetRec {
    map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a |- fun l -> match l with [] -> [] | x :: y -> f x :: map f y : 'a list -> 'a list by T-Abs {
        map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list |- match l with [] -> [] | x :: y -> f x :: map f y : 'a list by T-Match {
            map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list |- l : 'a list by T-Var {};
            map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list |- [] : 'a list by T-Nil {};
            map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- f x :: map f y : 'a list by T-Cons {
                map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- f x : 'a by T-App {
                    map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- f : 'a -> 'a by T-Var {};
                    map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- x : 'a by T-Var {}
                };
                map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- map f y : 'a list by T-App {
                    map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- map f : 'a list -> 'a list by T-App {
                        map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- map : ('a -> 'a) -> 'a list -> 'a list by T-Var {};
                        map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- f : 'a -> 'a by T-Var {}
                    };
                    map : ('a -> 'a) -> 'a list -> 'a list, f : 'a -> 'a, l : 'a list, x : 'a, y : 'a list |- y : 'a list by T-Var {}
                }
            }
        }
    };
    map : 'a. ('a -> 'a) -> 'a list -> 'a list |- let f = map (fun x -> x) in let a = f (3 :: []) in f (true :: []) : bool list by T-Let {
        map : 'a. ('a -> 'a) -> 'a list -> 'a list |- map (fun x -> x) : 'a list -> 'a list by T-App {
            map : 'a. ('a -> 'a) -> 'a list -> 'a list |- map : ('a -> 'a) -> 'a list -> 'a list by T-Var {};
            map : 'a. ('a -> 'a) -> 'a list -> 'a list |- fun x -> x : 'a -> 'a by T-Abs {
                map : 'a. ('a -> 'a) -> 'a list -> 'a list, x : 'a |- x : 'a by T-Var {}
            }
        };
        map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list |- let a = f (3 :: []) in f (true :: []) : bool list by T-Let {
            map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list |- f (3 :: []) : int list by T-App {
                map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list |- f : int list -> int list by T-Var {};
                map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list |- 3 :: [] : int list by T-Cons {
                    map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list |- 3 : int by T-Int {};
                    map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list |- [] : int list by T-Nil {}
                }
            };
            map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list, a : int list |- f (true :: []) : bool list by T-App {
                map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list, a : int list |- f : bool list -> bool list by T-Var {};
                map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list, a : int list |- true :: [] : bool list by T-Cons {
                    map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list, a : int list |- true : bool by T-Bool {};
                    map : 'a. ('a -> 'a) -> 'a list -> 'a list, f : 'a. 'a list -> 'a list, a : int list |- [] : bool list by T-Nil {}
                }
            }
        }
    }
}

/*122*/ 疑问，为什么最终是bool list，不是int list？
这个问题的无关项目很多，全式子对最终bool list起作用的只有x :: y -> [] : bool list
 []通过 Nil 解释为任意的类型。
|- let f = fun x -> let g = fun y -> x :: [] in if true then g 3 else g false in match f 2 with [] -> f true | x :: y -> [] : bool list by T-Let {
    |- fun x -> let g = fun y -> x :: [] in if true then g 3 else g false : 'a -> 'a list by T-Abs {
        x : 'a |- let g = fun y -> x :: [] in if true then g 3 else g false : 'a list by T-Let {
            x : 'a |- fun y -> x :: [] : 'b -> 'a list by T-Abs {
                x : 'a, y : 'b |- x :: [] : 'a list by T-Cons {
                    x : 'a, y : 'b |- x : 'a by T-Var {};
                    x : 'a, y : 'b |- [] : 'a list by T-Nil {}
                }
            };
            x : 'a, g :'b. 'b -> 'a list |- if true then g 3 else g false : 'a list by T-If {
                x : 'a, g :'b. 'b -> 'a list |- true : bool by T-Bool {};
                x : 'a, g :'b. 'b -> 'a list |- g 3 : 'a list by T-App {
                    x : 'a, g :'b. 'b -> 'a list |- g : int -> 'a list by T-Var {};
                    x : 'a, g :'b. 'b -> 'a list |- 3 : int by T-Int {}
                };
                x : 'a, g :'b. 'b -> 'a list |- g false : 'a list by T-App {
                    x : 'a, g :'b. 'b -> 'a list |- g : bool -> 'a list by T-Var {};
                    x : 'a, g :'b. 'b -> 'a list |- false : bool by T-Bool {}
                }
            }
        }
    };
    f : 'a. 'a -> 'a list |- match f 2 with [] -> f true | x :: y -> [] : bool list by T-Match {
        f : 'a. 'a -> 'a list |- f 2 : int list by T-App {
            f : 'a. 'a -> 'a list |- f : int -> int list by T-Var {};
            f : 'a. 'a -> 'a list |- 2 : int by T-Int {}
        };
        f : 'a. 'a -> 'a list |- f true : bool list by T-App {
            f : 'a. 'a -> 'a list |- f : bool -> bool list by T-Var {};
            f : 'a. 'a -> 'a list |- true : bool by T-Bool {}
        };
        f : 'a. 'a -> 'a list, x : int, y : int list |- [] : bool list by T-Nil {}
    }
}
